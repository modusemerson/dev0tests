{
	"info": {
		"_postman_id": "ca8446da-9d4a-4571-b2a6-b68481f760d9",
		"name": "Casa-Feature-Tests",
		"description": "##Author - Sridevi Miriyala\n##Description:",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Ready",
			"item": [
				{
					"name": "200. settlements",
					"item": [
						{
							"name": "201. happy_path_with_positions_accounts_ndc",
							"item": [
								{
									"name": "202. Get Open Window",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06ca836d-99c7-49c7-844e-fe68090e14a4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"State should be OPEN\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].state).to.eql('OPEN');",
													"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
													"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "state",
													"value": "OPEN"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "203. Get payerfsp position before transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d17ec2ad-d858-4b92-a665-a899f113de1b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Atleast one account position should be returned\", function () {",
													"    pm.environment.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
													"    pm.expect(jsonData).to.be.not.empty;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "204. Get payeefsp position before transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86fecf2a-398b-4281-8e49-49829a459e91",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Atleast one account position should be returned\", function () {",
													"    pm.environment.set(\"payeefspPositionBeforeTransfer\", jsonData[0].value);",
													"    pm.expect(jsonData).to.be.not.empty;",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "205. Send Quote",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c50395e1-7053-4129-95c0-bde3d27586c3",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "38c946ea-d0a5-45c0-a8e6-20b75f158103",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
													"      if(response !== null) {",
													"          console.log(response.json());",
													"       pm.test(\"Response ilpPacket is not null\", function () {",
													"           pm.expect(response.json().ilpPacket).not.equal(null);",
													"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
													"       });",
													"       ",
													"       pm.test(\"Response condition is not null\", function () {",
													"           pm.expect(response.json().condition).not.equal(null);",
													"           pm.environment.set(\"condition\", response.json().condition);",
													"       });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           //postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 5000);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-SOurce",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803906\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"100\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/quotes",
											"host": [
												"{{HOST_WS02}}{{BASE_PATH_WS02}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "206. Send Transfer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "065cdad9-3fab-48b4-b11b-5c767907c112",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('transferDate', (new Date()).toUTCString());",
													"}",
													"",
													"",
													"",
													"pm.environment.set(\"transferAmount\",\"99\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d8ad8abe-ae72-4efa-a6e0-20a490929a83",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"transferId\"), function (err, response) {",
													"      if(err) throw new Error('Did not receive response');",
													"      if(response !== null) {",
													"           var jsonData = response.json();",
													"           pm.test(\"Response transferId is same as the request transferId\", function () {",
													"            pm.expect(jsonData.transferId).to.eql(pm.variables.get('transferId'));",
													"           });",
													"           pm.test(\"Response status is COMMITTED\", function () {",
													"            pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"           });",
													"      } else {",
													"          pm.test(\"Transfer FAILED\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           postman.setNextRequest(null);",
													"      }",
													"   });",
													"}, 5000);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/transfers",
											"host": [
												"{{HOST_WS02}}{{BASE_PATH_WS02}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "207. Get payerfsp position after transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebf0a502-f2cf-4aaf-863d-96825a79c65f",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData2 = pm.response.json();",
													"",
													"pm.test(\"Atleast one account position should be returned\", function () {",
													"    pm.environment.set(\"payerfspPositionAfterTransfer\", jsonData2[0].value);",
													"    pm.expect(jsonData2).to.be.not.empty;",
													"   /*  pm.expect(jsonData2[0].value).to.eql(Number(pm.environment.get(\"payerfspPositionBeforeTransfer\"))+Number(pm.environment.get(\"transferAmount\")));*/",
													"   pm.expect(jsonData2[0].value).to.eql(Number(pm.environment.get(\"payerfspPositionBeforeTransfer\"))+99);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "208. Get payeefsp position after transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57c0c1ca-c109-47fe-8a1f-3649d9808e23",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData3 = pm.response.json();",
													"",
													"pm.test(\"Atleast one account position should be returned\", function () {",
													"    pm.environment.set(\"payeefspPositionAfterTransfer\", jsonData3[0].value);",
													"    pm.expect(jsonData3).to.be.not.empty;",
													"   /* pm.expect(jsonData3[0].value).to.eql(Number(pm.environment.get(\"payeefspPositionBeforeTransfer\"))-Number(pm.environment.get(\"transferAmount\")));*/",
													"   pm.expect(jsonData3[0].value).to.eql(Number(pm.environment.get(\"payeefspPositionBeforeTransfer\"))-99);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "209. Close Window",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b16f7ed-2212-419d-a43b-e2b38cf2b718",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New window State should be OPEN\", function () {",
													"    console.log(pm.response.json());",
													"    pm.expect(pm.response.json().state).to.eql('OPEN');",
													"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
													"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
													"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
													"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{openWindowID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "210. Get payerfsp accont balance before settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22c316ff-8ffd-4e54-b450-d12deb6e40b0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        console.log(jsonData[i].value);",
													"        pm.environment.set(\"payerfspAccountBalanceBeforeSettlement\", jsonData[i].value);",
													"    }",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "211. Get payeefsp accont balance  before settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        console.log(jsonData[i].value);",
													"        pm.environment.set(\"payeefspAccountBalanceBeforeSettlement\", jsonData[i].value);",
													"    }",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "212. Create Settlement for Closed Window",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fd9c949-c268-4b8a-b924-724a54c9295d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set(\"settlementId\", pm.response.json().id);",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
													"});",
													"",
													"pm.test(\"Number of associated windows should be 1\", function () {",
													"    pm.expect(jsonData.settlementWindows.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Associated Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Associated Settlement Window state should be PENDING_SETTLEMENT \", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql('PENDING_SETTLEMENT');",
													"});",
													"",
													"pm.test(\"Associated number of participants should be 2 \", function () {",
													"    pm.expect(jsonData.participants.length).to.eql(2);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{closedWindowID}}\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											]
										}
									},
									"response": []
								},
								{
									"name": "213. Settle participant 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c979c711-452b-4886-915b-75f744dae9b1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowId).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowStateId).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Payer Participant ID should be: \"+pm.environment.get(\"payerFspId\"), function () {",
													"    pm.expect(jsonData.participants[0].id).to.eql(parseInt(pm.environment.get(\"payerFspId\")));",
													"});",
													"",
													"pm.test(\"Payer Participant Account ID should be: \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payerfsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1feb7688-d52a-4273-b132-938ad7d8532c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"participants\": [\n    {\n      \"id\": {{payerFspId}},\n      \"accounts\": [\n        {\n          \"id\": {{payerFspAccountId}},\n          \"reason\": \"test\",\n          \"state\": \"SETTLED\"\n        }\n      ]\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "214. Settle participant 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab975876-6b6e-4ef2-95a1-f9831cc625aa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be SETTLED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowId).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be SETTLED\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowStateId).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Payee Participant ID should be: \" +pm.environment.get(\"payeeFspId\"), function () {",
													"    pm.expect(jsonData.participants[0].id).to.eql(parseInt(pm.environment.get(\"payeeFspId\")));",
													"});",
													"",
													"pm.test(\"Payee Participant Account ID should be \"+pm.environment.get(\"payeeFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payeeFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payeefsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].state).to.eql(\"SETTLED\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f0cf16df-8822-433f-b98d-b748f4cf5128",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"participants\": [\n    {\n      \"id\": {{payeeFspId}},\n      \"accounts\": [\n        {\n          \"id\": {{payeeFspAccountId}},\n          \"reason\": \"test\",\n          \"state\": \"SETTLED\"\n        }\n      ]\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "215. Get payerfsp accont balance after settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var payerfspAccountBalanceAfterSettlement;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        console.log(jsonData[i].value);",
													"        payerfspAccountBalanceAfterSettlement = jsonData[i].value;",
													"    }",
													"}",
													"",
													"/*var expectedPayerAccountBalanceAfterSettlement = Number(pm.variables.get(\"payerfspAccountBalanceBeforeSettlement\"))+ Number(pm.variables.get(\"payerfspPositionAfterTransfer\"));*/",
													"",
													"var expectedPayerAccountBalanceAfterSettlement = Number(pm.environment.get(\"payerfspAccountBalanceBeforeSettlement\"))+ Number(pm.environment.get(\"transferAmount\"));",
													"",
													"",
													"console.log('expectedPayerAccountBalanceAfterSettlement: '+expectedPayerAccountBalanceAfterSettlement);",
													"",
													"pm.test(\"Payeefsp settlement account balance after settlement should be: \"+ expectedPayerAccountBalanceAfterSettlement, function () {",
													"    pm.expect(payerfspAccountBalanceAfterSettlement).to.eql(expectedPayerAccountBalanceAfterSettlement);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "216. Get payeefsp accont balance  after settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0be8c48-b922-4024-b15a-010ba91b7d9e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var payeefspAccountBalanceAfterSettlement;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        console.log(jsonData[i].value);",
													"        payeefspAccountBalanceAfterSettlement = jsonData[i].value;",
													"    }",
													"}",
													"",
													"/*var expectedPayeeAccountBalanceAfterSettlement = Number(pm.variables.get(\"payeefspAccountBalanceBeforeSettlement\"))+ Number(pm.variables.get(\"payeefspPositionAfterTransfer\"));*/",
													"var expectedPayeeAccountBalanceAfterSettlement = Number(pm.environment.get(\"payeefspAccountBalanceBeforeSettlement\"))- Number(pm.environment.get(\"transferAmount\"));",
													"",
													"console.log('expectedPayeeAccountBalanceAfterSettlement: '+expectedPayeeAccountBalanceAfterSettlement);",
													"",
													"pm.test(\"Payeefsp settlement account balance after settlement should be: \"+ expectedPayeeAccountBalanceAfterSettlement, function () {",
													"    pm.expect(payeefspAccountBalanceAfterSettlement).to.eql(expectedPayeeAccountBalanceAfterSettlement);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "217. Get Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be SETTLED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be SETTLED\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Payer Participant ID should be: \"+pm.environment.get(\"payerFspId\"), function () {",
													"    pm.expect(jsonData.participants[0].id).to.eql(parseInt(pm.environment.get(\"payerFspId\")));",
													"});",
													"",
													"pm.test(\"Payer Participant Account ID should be: \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payerfsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Payee Participant ID should be: \" +pm.environment.get(\"payeeFspId\"), function () {",
													"    pm.expect(jsonData.participants[1].id).to.eql(parseInt(pm.environment.get(\"payeeFspId\")));",
													"});",
													"",
													"pm.test(\"Payee Participant Account ID should be \"+pm.environment.get(\"payeeFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[1].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payeeFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payeefsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[1].accounts[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "218. Get payerfsp position after settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e39577b9-bf21-491a-9e1a-ab555b9d8ad6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var payerfspPositionAfterSettlement = jsonData[0].value",
													"",
													"pm.test(\"Payerfsp position after settlement should be same as before transfers stared.\", function () {",
													"    pm.expect(payerfspPositionAfterSettlement).to.eql(pm.environment.get(\"payerfspPositionBeforeTransfer\"));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "219. Get payeefsp position after settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25c75757-b306-4dec-8388-1d0a685d582d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var payeefspPositionAfterSettlement = jsonData[0].value",
													"",
													"pm.test(\"Payeefsp position after settlement should be same as before transfers started.\", function () {",
													"    pm.expect(payeefspPositionAfterSettlement).to.eql(pm.environment.get(\"payeefspPositionBeforeTransfer\"));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "220. happy_path_with_positions",
							"item": [
								{
									"name": "221. Get Open Window",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06ca836d-99c7-49c7-844e-fe68090e14a4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"State should be OPEN\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].state).to.eql('OPEN');",
													"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
													"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "state",
													"value": "OPEN"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "222. Get payerfsp position before transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d17ec2ad-d858-4b92-a665-a899f113de1b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Atleast one account position should be returned\", function () {",
													"    pm.environment.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
													"    pm.expect(jsonData).to.be.not.empty;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "223. Get payeefsp position before transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86fecf2a-398b-4281-8e49-49829a459e91",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Atleast one account position should be returned\", function () {",
													"    pm.environment.set(\"payeefspPositionBeforeTransfer\", jsonData[0].value);",
													"    pm.expect(jsonData).to.be.not.empty;",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "224. Send Quote",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c50395e1-7053-4129-95c0-bde3d27586c3",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "38c946ea-d0a5-45c0-a8e6-20b75f158103",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
													"      if(response !== null) {",
													"          console.log(response.json());",
													"       pm.test(\"Response ilpPacket is not null\", function () {",
													"           pm.expect(response.json().ilpPacket).not.equal(null);",
													"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
													"       });",
													"       ",
													"       pm.test(\"Response condition is not null\", function () {",
													"           pm.expect(response.json().condition).not.equal(null);",
													"           pm.environment.set(\"condition\", response.json().condition);",
													"       });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           //postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 5000);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-SOurce",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803906\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"100\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/quotes",
											"host": [
												"{{HOST_WS02}}{{BASE_PATH_WS02}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "225. Send Transfer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "065cdad9-3fab-48b4-b11b-5c767907c112",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('transferDate', (new Date()).toUTCString());",
													"}",
													"",
													"",
													"",
													"pm.environment.set(\"transferAmount\",\"99\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1eea691b-05bc-4b81-b4e3-50077883cc41",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"transferId\"), function (err, response) {",
													"      if(err) throw new Error('Did not receive response');",
													"      if(response !== null) {",
													"           var jsonData = response.json();",
													"           pm.test(\"Response transferId is same as the request transferId\", function () {",
													"            pm.expect(jsonData.transferId).to.eql(pm.variables.get('transferId'));",
													"           });",
													"           pm.test(\"Response status is COMMITTED\", function () {",
													"            pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"           });",
													"      } else {",
													"          pm.test(\"Transfer FAILED\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           postman.setNextRequest(null);",
													"      }",
													"   });",
													"}, 15000);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/transfers",
											"host": [
												"{{HOST_WS02}}{{BASE_PATH_WS02}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "226. Get payerfsp position after transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebf0a502-f2cf-4aaf-863d-96825a79c65f",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Atleast one account position should be returned\", function () {",
													"    pm.environment.set(\"payerfspPositionAfterTransfer\", jsonData[0].value);",
													"    pm.expect(jsonData).to.be.not.empty;",
													"     pm.expect(jsonData[0].value).to.eql(Number(pm.environment.get(\"payerfspPositionBeforeTransfer\"))+Number(pm.environment.get(\"transferAmount\")));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "227. Get payeefsp position after transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57c0c1ca-c109-47fe-8a1f-3649d9808e23",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Atleast one account position should be returned\", function () {",
													"    pm.environment.set(\"payeefspPositionAfterTransfer\", jsonData[0].value);",
													"    pm.expect(jsonData).to.be.not.empty;",
													"    pm.expect(jsonData[0].value).to.eql(Number(pm.environment.get(\"payeefspPositionBeforeTransfer\"))-Number(pm.environment.get(\"transferAmount\")));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "228. Close Window",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b16f7ed-2212-419d-a43b-e2b38cf2b718",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"New window State should be OPEN\", function () {",
													"    console.log(pm.response.json());",
													"    pm.expect(pm.response.json().state).to.eql('OPEN');",
													"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
													"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
													"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
													"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{openWindowID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "229. Create Settlement for Closed Window",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fd9c949-c268-4b8a-b924-724a54c9295d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set(\"settlementId\", pm.response.json().id);",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
													"});",
													"",
													"pm.test(\"Number of associated windows should be 1\", function () {",
													"    pm.expect(jsonData.settlementWindows.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Associated Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Associated Settlement Window state should be PENDING_SETTLEMENT \", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql('PENDING_SETTLEMENT');",
													"});",
													"",
													"pm.test(\"Associated number of participants should be 2 \", function () {",
													"    pm.expect(jsonData.participants.length).to.eql(2);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{closedWindowID}}\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											]
										}
									},
									"response": []
								},
								{
									"name": "230. Settle participant 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c979c711-452b-4886-915b-75f744dae9b1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowId).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowStateId).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Payer Participant ID should be: \"+pm.environment.get(\"payerFspId\"), function () {",
													"    pm.expect(jsonData.participants[0].id).to.eql(parseInt(pm.environment.get(\"payerFspId\")));",
													"});",
													"",
													"pm.test(\"Payer Participant Account ID should be: \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payerfsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1feb7688-d52a-4273-b132-938ad7d8532c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"participants\": [\n    {\n      \"id\": {{payerFspId}},\n      \"accounts\": [\n        {\n          \"id\": {{payerFspAccountId}},\n          \"reason\": \"test\",\n          \"state\": \"SETTLED\"\n        }\n      ]\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "231. Settle participant 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab975876-6b6e-4ef2-95a1-f9831cc625aa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be SETTLED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowId).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be SETTLED\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowStateId).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Payee Participant ID should be: \" +pm.environment.get(\"payeeFspId\"), function () {",
													"    pm.expect(jsonData.participants[0].id).to.eql(parseInt(pm.environment.get(\"payeeFspId\")));",
													"});",
													"",
													"pm.test(\"Payee Participant Account ID should be \"+pm.environment.get(\"payeeFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payeeFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payeefsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].state).to.eql(\"SETTLED\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f0cf16df-8822-433f-b98d-b748f4cf5128",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"participants\": [\n    {\n      \"id\": {{payeeFspId}},\n      \"accounts\": [\n        {\n          \"id\": {{payeeFspAccountId}},\n          \"reason\": \"test\",\n          \"state\": \"SETTLED\"\n        }\n      ]\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "232. Get Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be SETTLED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be SETTLED\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Payer Participant ID should be: \"+pm.environment.get(\"payerFspId\"), function () {",
													"    pm.expect(jsonData.participants[0].id).to.eql(parseInt(pm.environment.get(\"payerFspId\")));",
													"});",
													"",
													"pm.test(\"Payer Participant Account ID should be: \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payerfsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Payee Participant ID should be: \" +pm.environment.get(\"payeeFspId\"), function () {",
													"    pm.expect(jsonData.participants[1].id).to.eql(parseInt(pm.environment.get(\"payeeFspId\")));",
													"});",
													"",
													"pm.test(\"Payee Participant Account ID should be \"+pm.environment.get(\"payeeFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[1].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payeeFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payeefsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[1].accounts[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "233. Get payerfsp position after settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e39577b9-bf21-491a-9e1a-ab555b9d8ad6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var payerfspPositionAfterSettlement = jsonData[0].value",
													"",
													"pm.test(\"Payerfsp position after settlement should be same as before transfers stared.\", function () {",
													"    pm.expect(payerfspPositionAfterSettlement).to.eql(pm.environment.get(\"payerfspPositionBeforeTransfer\"));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "234. Get payeefsp position after settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25c75757-b306-4dec-8388-1d0a685d582d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var payeefspPositionAfterSettlement = jsonData[0].value",
													"",
													"pm.test(\"Payeefsp position after settlement should be same as before transfers started.\", function () {",
													"    pm.expect(payeefspPositionAfterSettlement).to.eql(pm.environment.get(\"payeefspPositionBeforeTransfer\"));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"description": "Author: Sridevi Miriyala",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "308e0d73-5af8-4f1a-ae74-8547c7909504",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4d93e7eb-ca04-48aa-8be1-0c9617bfe1b2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "300. p2p_money_transfer",
					"item": [
						{
							"name": "happy_path_ws02",
							"item": [
								{
									"name": "Get Participant Receiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4dcb6c71-9efe-4cd2-9ece-9b652c82af40",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
													"       //console.log(response.json());",
													"       pm.test(\"Expected receiver fspId is: \"+pm.variables.get(\"expectedFspId\"), function () {",
													"           pm.expect(response.json().fspId).to.eql(pm.variables.get(\"expectedFspId\"));",
													"        });",
													"        ",
													"      ",
													"    });",
													"}, 3000);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0cb60963-9178-4069-9360-82a0664a0db8",
												"exec": [
													"pm.variables.set('expectedFspId', 'payeefsp');",
													"pm.environment.set('participantDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.participants+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.participants+json;version=1.0"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "Date",
												"value": "{{participantDate}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/{{pathfinderMSISDN}}",
											"host": [
												"{{HOST_WS02}}{{BASE_PATH_WS02}}"
											],
											"path": [
												"participants",
												"MSISDN",
												"{{pathfinderMSISDN}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Party Receiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "442441c0-a334-4daf-93d9-618e516eb084",
												"exec": [
													"",
													"",
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
													"       console.log(response.json());",
													"       pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
													"          pm.expect(response.json().party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
													"        });",
													"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
													"          pm.expect(response.json().party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
													"        });",
													"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
													"          pm.expect(response.json().party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
													"        });   ",
													"      ",
													"    });",
													"}, 5000);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7546a2e7-7b86-4aa1-9841-28d27c3585d6",
												"exec": [
													"pm.variables.set('fullName', 'Sridevi Miriyala');",
													"pm.variables.set('expectedFirstName', 'Sridevi');",
													"pm.variables.set('expectedLastName', 'Miriyala');",
													"pm.variables.set('expectedDOB', '2010-10-10');",
													"pm.environment.set('partyDate', (new Date()).toUTCString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.parties+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.parties+json;version=1.0"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "Date",
												"value": "{{partyDate}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/{{pathfinderMSISDN}}",
											"host": [
												"{{HOST_WS02}}{{BASE_PATH_WS02}}"
											],
											"path": [
												"parties",
												"MSISDN",
												"{{pathfinderMSISDN}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Quote",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('quoteId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
													"// });",
													"",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"      if(response !== null) {",
													"          console.log(response.json());",
													"       pm.test(\"Response ilpPacket is not null\", function () {",
													"           pm.expect(response.json().ilpPacket).not.equal(null);",
													"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
													"       });",
													"       ",
													"       pm.test(\"Response condition is not null\", function () {",
													"           pm.expect(response.json().condition).not.equal(null);",
													"           pm.environment.set(\"condition\", response.json().condition);",
													"       });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 3000);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"100\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/quotes",
											"host": [
												"{{HOST_WS02}}{{BASE_PATH_WS02}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Transfer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "55836d81-01d2-42a2-bc59-941c44e3d3ae",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transferId\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json();",
													"              pm.test(\"Response transferId is same as the request transferId\", function () {",
													"                pm.expect(jsonData.transferId).to.eql(pm.variables.get('transferId'));",
													"              });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              postman.setNextRequest(null);",
													"          }",
													"   });",
													"}, 3000);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/transfers",
											"host": [
												"{{HOST_WS02}}{{BASE_PATH_WS02}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "400. block_transfer ( p>ndc )",
					"item": [
						{
							"name": "GET limits-payerfsp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a75db36e-2d2f-432c-81a6-77f912c41aa9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var payerNDC = jsonData[0].limit.value",
											"pm.environment.set('payerNDC',payerNDC)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"limits"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET limits -payeefsp",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"limits"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payerfsp position before TheTransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2c9a7dc-8b97-4b80-ad48-3b0e722f87d6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payerfspPositionBeforeTransferblock\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payeefsp position before TheTransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a9997f5-7f71-400c-8e4b-2234ad1aba3e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payeefspPositionBeforeTransferblock\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "87b53856-d305-4f6e-8fd5-3a5243ae8e4a",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.variables.set('quoteId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
											"}",
											"",
											"var amount = Number(pm.environment.get(\"payerNDC\"))-Number( pm.environment.get(\"payerfspPositionBeforeTransferblock\"))+100;",
											"pm.environment.set('transferAmountblock',amount);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
											"// });",
											"",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response !== null) {",
											"          console.log(response.json());",
											"       pm.test(\"Response ilpPacket is not null\", function () {",
											"           pm.expect(response.json().ilpPacket).not.equal(null);",
											"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
											"       });",
											"       ",
											"       pm.test(\"Response condition is not null\", function () {",
											"           pm.expect(response.json().condition).not.equal(null);",
											"           pm.environment.set(\"condition\", response.json().condition);",
											"       });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           postman.setNextRequest(null);",
											"      }",
											"       ",
											"   });",
											"}, 5000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-SOurce",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmountblock}}\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/quotes",
									"host": [
										"{{HOST_WS02}}{{BASE_PATH_WS02}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.variables.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.variables.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ec961c23-5b9f-4509-9b30-4ea1de9a7b43",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transferId\"), function (err, response) {",
											"          if(response !== null) {",
											"              var jsonData = response.json();",
											"              pm.test(\"Error Code should be retuened\", function () {",
											"                pm.expect(jsonData.errorInformation.errorCode).to.eql(4001);",
											"              });",
											"              pm.test(\"Error Description should be retuened\", function () {",
											"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payer FSP has insufficient liquidity to perform the transfer');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 5000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmountblock}}\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/transfers",
									"host": [
										"{{HOST_WS02}}{{BASE_PATH_WS02}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payerfsp position after the transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7174c4f7-799f-4c4a-ad66-ab598ed32477",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Position before and after the transfer should be the same\", function () {",
											"    pm.expect(jsonData[0].value).to.eql(pm.environment.get(\"payerfspPositionBeforeTransferblock\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payeefsp position after the transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "864dee38-3b5b-4709-9637-92931170b286",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Position before and after the transfer should be the same\", function () {",
											"    pm.expect(Number(jsonData[0].value)).to.eql(Number(pm.environment.get(\"payeefspPositionBeforeTransferblock\")));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"description": "GET Limits\nGET Positions for payer and payee\nset amount=(NDC-P) + 10\nPOST Quotes - send to payee that responds COMMITTED\nPOST Transfers-Prepare\n      -Payerfsp should get error msg \"insufficient liquidity in payerfsp to perform transfer \" \nGET positions - \n  current payer position = prev position \n  current payee position = prev position \n(Failure of the transfer due to insufficient liquidity from payerfsp, results no change in positions)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2f9024db-2f95-4bf6-9022-f7bd5d50afd3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eefb3ca4-f973-4059-95cc-c681c9e55121",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "participants ( pathfinder integration )",
			"item": [
				{
					"name": "/type/ID",
					"item": [
						{
							"name": "GET ParticipantsByTypeAndID",
							"item": [
								{
									"name": "Positive Test Cases",
									"item": [
										{
											"name": "202 - Accepted (PASSED)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
															"       //console.log(response.json());",
															"       pm.test(\"Expected receiver fspId is: \"+pm.variables.get(\"expectedFspId\"), function () {",
															"          // pm.expect(response.json().party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFspId\"));",
															"          pm.expect(response.json().fspId).to.eql(pm.variables.get(\"expectedFspId\"));",
															"        });",
															"        ",
															"      ",
															"    });",
															"}, 3000);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0cb60963-9178-4069-9360-82a0664a0db8",
														"exec": [
															"pm.variables.set('expectedFspId', 'payeefsp');",
															"pm.environment.set('participantDate', (new Date()).toUTCString());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.participants+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.participants+json;version=1.0"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "Date",
														"value": "{{participantDaten}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/17039811907",
													"host": [
														"{{HOST_WS02}}{{BASE_PATH_WS02}}"
													],
													"path": [
														"participants",
														"MSISDN",
														"17039811907"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative Test Cases",
									"item": [
										{
											"name": "Server Errors",
											"item": [
												{
													"name": "202 - 2000 - Generic Server Error",
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/17039811907",
															"host": [
																"{{HOST_WS02}}{{BASE_PATH_WS02}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"17039811907"
															]
														},
														"description": "Generic server error to be used in order not to disclose information that may be considered private."
													},
													"response": []
												},
												{
													"name": "401 - Unauthorized",
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/{{receiverMSISDN}}",
															"host": [
																"{{HOST_WS02}}{{BASE_PATH_WS02}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{receiverMSISDN}}"
															]
														},
														"description": "Generic server error to be used in order not to disclose information that may be considered private."
													},
													"response": []
												},
												{
													"name": "405 - Method Not Allowed (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "e6694f0f-466f-483f-ba4a-3ea3ee20ca95",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "72bcfb4b-2963-4d6d-b756-3794c9c2eb90",
																"exec": [
																	"pm.test(\"Status code is 405\", function () {",
																	"    pm.response.to.have.status(405);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text",
																"disabled": true
															}
														],
														"body": {},
														"url": {
															"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/{{receiverMSISDN}}",
															"host": [
																"{{HOST_WS02}}{{BASE_PATH_WS02}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{receiverMSISDN}}"
															],
															"query": [
																{
																	"key": "Accept",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "Date",
																	"value": null,
																	"disabled": true
																}
															]
														},
														"description": "Generic server error to be used in order not to disclose information that may be considered private."
													},
													"response": []
												}
											],
											"description": "All possible errors occurring on the server in which it failed to fulfil an apparently valid request from the client should use the high-level error code 2 (error codes 2xxx). These error codes should indicate that the server is aware that it has encountered an error or is otherwise incapable of performing the requested service.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5b141ce7-491d-4275-a1ac-578a5551b8f5",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e9f2605a-6239-4194-804c-2e2ac858c7be",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Client Errors",
											"item": [
												{
													"name": "30xx - Generic Client Errors",
													"item": [
														{
															"name": "3000 - Generic Client Error",
															"request": {
																"method": "GET",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/{{receiverMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"participants",
																		"MSISDN",
																		"{{receiverMSISDN}}"
																	]
																},
																"description": "Generic client error, used in order not to disclose information that may be considered private."
															},
															"response": []
														},
														{
															"name": "406 - 3001 - Unacceptable Version Requested (BUG)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "d3ee1124-2b9c-452c-a3ea-f388c42be5cf",
																		"exec": [
																			"pm.test(\"Status code is 406\", function () {",
																			"    pm.response.to.have.status(406);",
																			"});",
																			"",
																			"pm.test(\"Error message is expected as response.\", function () {",
																			"           var jsonData = pm.response.json();",
																			"           pm.expect(jsonData.errorInformation.errorCode).to.eql('3001');",
																			"           pm.expect(jsonData.errorInformation.errorDescription).to.eql('Bad request - Malformed \\\"Type\\\"');",
																			"        });",
																			"        ",
																			"",
																			"// pm.test(\"Check that Content-Type is present\", function () {",
																			"//     pm.response.to.have.header(\"Content-Type\");",
																			"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																			"// });",
																			"",
																			"/*setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																			"       //console.log(response.json());",
																			"       pm.test(\"Expected receiver fspId is: \"+pm.variables.get(\"expectedFspId\"), function () {",
																			"           pm.expect(response.json().party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFspId\"));",
																			"        });",
																			"        ",
																			"      ",
																			"    });",
																			"}, 1000)*/",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "a9269a36-3423-4831-9f5d-531a2dc210c9",
																		"exec": [
																			"pm.variables.set('participantDateHeader', (new Date()).toUTCString());"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.participants+json;version=100",
																		"type": "text"
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text"
																	},
																	{
																		"key": "Date",
																		"value": "{{participantDateHeader}}",
																		"type": "text"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.participants+json;version=1.0",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/{{pathfinderMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"participants",
																		"MSISDN",
																		"{{pathfinderMSISDN}}"
																	]
																},
																"description": "Client requested to use a protocol version which is not supported by the server."
															},
															"response": []
														}
													],
													"_postman_isSubFolder": true
												},
												{
													"name": "31xx - Validation Errors",
													"item": [
														{
															"name": "400 - 3100 - Generic Validation Error",
															"request": {
																"method": "GET",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/{{receiverMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"participants",
																		"MSISDN",
																		"{{receiverMSISDN}}"
																	]
																},
																"description": "Generic validation error to be used in order not to disclose information that may be considered private."
															},
															"response": []
														},
														{
															"name": "400 - 3101 - Malformed MSISDN (BUG)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																		"exec": [
																			"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "3472322e-3146-4049-a128-f281e0be340e",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																			"       //console.log(response.json());",
																			"       pm.test(\"Error message is expected as response.\", function () {",
																			"           pm.expect(response.json().errorCode).to.eql('3101');",
																			"           pm.expect(response.json().errorDescription).to.eql('Malformed MSISDN');",
																			"        });",
																			"    });",
																			"}, 1000)"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.participants+json;version=1",
																		"type": "text"
																	},
																	{
																		"key": "Date",
																		"value": "{{dateHeader}}",
																		"type": "text"
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/@3456!",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"participants",
																		"MSISDN",
																		"@3456!"
																	]
																},
																"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
															},
															"response": []
														},
														{
															"name": "400 - 3101 - Malformed Type (BUG)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																		"exec": [
																			"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "3472322e-3146-4049-a128-f281e0be340e",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																			"       //console.log(response.json());",
																			"       pm.test(\"Error message is expected as response.\", function () {",
																			"           pm.expect(response.json().errorCode).to.eql('3101');",
																			"           pm.expect(response.json().errorDescription).to.eql('Malformed Type');",
																			"        });",
																			"    });",
																			"}, 1000)"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"type": "text",
																		"value": "application/vnd.interoperability.participants+json;version=1"
																	},
																	{
																		"key": "Date",
																		"type": "text",
																		"value": "{{dateHeader}}"
																	},
																	{
																		"key": "FSPIOP-Source",
																		"type": "text",
																		"value": "{{payerfsp}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/XYZ/{{pathfinderMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"participants",
																		"XYZ",
																		"{{pathfinderMSISDN}}"
																	]
																},
																"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
															},
															"response": []
														},
														{
															"name": "400 - 3101 - Malformed Header (BUG)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																			""
																		]
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "3b65ac8a-b8ef-4fef-b3bb-9640778e4aa4",
																		"type": "text/javascript",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																			"       //console.log(response.json());",
																			"       pm.test(\"Error message is expected as response.\", function () {",
																			"           pm.expect(response.json().errorCode).to.eql('3101');",
																			"           pm.expect(response.json().errorDescription).to.eql('Malformed Header');",
																			"        });",
																			"    });",
																			"}, 1000)"
																		]
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "xyz"
																	},
																	{
																		"key": "Date",
																		"value": "{{dateHeader}}"
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/{{pathfinderMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"participants",
																		"MSISDN",
																		"{{pathfinderMSISDN}}"
																	]
																},
																"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
															},
															"response": []
														},
														{
															"name": "404 - 3102 - Missing Mandatory ID (BUG)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"// pm.test(\"Check that Content-Type is present\", function () {",
																			"//     pm.response.to.have.header(\"Content-Type\");",
																			"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																			"// });",
																			"",
																			"setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																			"       //console.log(response.json());",
																			"       pm.test(\"Expected receiver fspId is: \"+pm.variables.get(\"expectedFspId\"), function () {",
																			"           pm.expect(response.json().party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFspId\"));",
																			"        });",
																			"        ",
																			"      ",
																			"    });",
																			"}, 1000)",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																		"exec": [
																			"pm.variables.set('expectedFspId', 'payeefsp');",
																			"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.participants+json;version=1"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.participants+json;version=1.0"
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}"
																	},
																	{
																		"key": "Date",
																		"value": "{{participantDate}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"participants",
																		"MSISDN",
																		""
																	]
																}
															},
															"response": []
														},
														{
															"name": "400 - 3102 - Missing Mandatory Headers (BUG)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"// pm.test(\"Check that Content-Type is present\", function () {",
																			"//     pm.response.to.have.header(\"Content-Type\");",
																			"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																			"// });",
																			"",
																			"setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																			"       //console.log(response.json());",
																			"       pm.test(\"Error message is expected as response.\", function () {",
																			"           pm.expect(response.json().errorCode).to.eql('3102');",
																			"           pm.expect(response.json().errorDescription).to.eql('Missing Date Header');",
																			"        });",
																			"        ",
																			"      ",
																			"    });",
																			"}, 1000)",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																		"exec": [
																			"pm.variables.set('expectedFspId', 'payeefsp');",
																			"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.participants+json;version=1"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.participants+json;version=1.0"
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}"
																	},
																	{
																		"key": "Date",
																		"value": "{{participantDate}}",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/{{pathfinderMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"participants",
																		"MSISDN",
																		"{{pathfinderMSISDN}}"
																	]
																}
															},
															"response": []
														}
													],
													"_postman_isSubFolder": true
												},
												{
													"name": "32xx - Identifier Errors",
													"item": [
														{
															"name": "202 - 3200 - Generic ID Not Found (BUG)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "239058ed-5271-425d-8aa4-5259d1a3b185",
																		"exec": [
																			"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "87f10c97-f0e7-45cb-a9b3-f95e189874a2",
																		"exec": [
																			"pm.test(\"Status code is 202\", function () {",
																			"    pm.response.to.have.status(202);",
																			"});",
																			"",
																			"setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"00000000\"), function (err, response) {",
																			"       //console.log(response.json());",
																			"       pm.test(\"Error message is expected as response.\", function () {",
																			"           pm.expect(response.json().errorCode).to.eql('3200');",
																			"           pm.expect(response.json().errorDescription).to.eql('ID Not Found');",
																			"        });",
																			"        ",
																			"      ",
																			"    });",
																			"}, 2800)"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.participants+json;version=1",
																		"type": "text"
																	},
																	{
																		"key": "Date",
																		"value": "{{dateHeader}}",
																		"type": "text"
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.participants+json;version=1.0",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/00000000",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"participants",
																		"MSISDN",
																		"00000000"
																	]
																},
																"description": "Generic ID error provided by the client."
															},
															"response": []
														},
														{
															"name": "3201 - Destination FSP Error",
															"request": {
																"method": "GET",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/{{receiverMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"participants",
																		"MSISDN",
																		"{{receiverMSISDN}}"
																	]
																},
																"description": "Destination FSP does not exist or cannot be found."
															},
															"response": []
														},
														{
															"name": "3204 - Party Not Found",
															"request": {
																"method": "GET",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/{{receiverMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"participants",
																		"MSISDN",
																		"{{receiverMSISDN}}"
																	]
																},
																"description": "Party with the provided identifier, identifier type, and optional sub id or type was not found."
															},
															"response": []
														}
													],
													"_postman_isSubFolder": true
												},
												{
													"name": "33xx - Expired Errors",
													"item": [],
													"_postman_isSubFolder": true
												}
											],
											"description": "All possible errors occurring on the server in which the server reports that the client has sent one or more erroneous parameters should use the high-level error code 3 (error codes 3xxx). These error codes should indicate that the server could not perform the service according to the request from the client. The server should provide an explanation why the service could not be performed.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "53dc229b-8fd8-4f53-9fed-df2898d7969e",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "07feae10-c923-4652-ace8-14c9a2f9a51e",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"_postman_isSubFolder": true
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "##Author - Sridevi Miriyala\n\n## Description: ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ff60dc78-2ebe-479b-a736-803eb1479859",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3ad89ea7-5c88-4f94-afd1-29b4c6604ff4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "parties ( pathfinder integration )",
			"item": [
				{
					"name": "/type/ID",
					"item": [
						{
							"name": "GET - PartiesByTypeAndID",
							"item": [
								{
									"name": "Positive Test Cases",
									"item": [
										{
											"name": "202 - Accepted (PASSED)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fdb13fdb-0720-4c9d-8ff1-d28765c9fa5d",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
															"       //console.log(response.json());",
															"       pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
															"           pm.expect(response.json().party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
															"        });",
															"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
															"          pm.expect(response.json().party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
															"        });",
															"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
															"          pm.expect(response.json().party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
															"        });   ",
															"        ",
															"      ",
															"    });",
															"}, 2000)",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "857a50b8-ed16-412f-9798-dd568bfd5a71",
														"exec": [
															"pm.variables.set('fullName', 'Sridevi Miriyala');",
															"pm.variables.set('expectedFirstName', 'Sridevi');",
															"pm.variables.set('expectedLastName', 'Miriyala');",
															"pm.variables.set('expectedDOB', '10/10/2010');",
															"pm.environment.set('partyDate', (new Date()).toUTCString());",
															"",
															"/*",
															"pm.variables.set('expectedFspId', 'payeefsp');",
															"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
															"pm.variables.set('expectedFirstName', 'Siabelo');",
															"pm.variables.set('expectedLastName', 'Maroka');",
															"pm.variables.set('expectedDOB', '3/3/1973');",
															"",
															"",
															"",
															"var requestData = {",
															"    \"party\": {",
															"        \"partyIdInfo\": {",
															"            \"partyIdType\": \"MSISDN\",",
															"            \"partyIdentifier\": \"17039811907\",",
															"            \"fspId\": \"payeefsp\"",
															"        },",
															"        \"name\": \"Siabelo Maroka\",",
															"        \"personalInfo\": {",
															"            \"complexName\": {",
															"                \"firstName\": \"Siabelo\",",
															"                \"lastName\": \"Maroka\"",
															"            },",
															"            \"dateOfBirth\": \"3/3/1973\"",
															"        }",
															"    }",
															"}",
															"",
															"const addUserRequest = {",
															"  url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"),",
															"  method: 'POST',",
															"  headers: {",
															"        \"content-type\": \"application/json\",",
															"        },",
															"  body: JSON.stringify(requestData)",
															"};",
															"pm.sendRequest(addUserRequest, function (err, res) {",
															"  console.log(err ? err : res.json());",
															"});*/",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.parties+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.parties+json;version=1.0"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "Date",
														"value": "{{participantDate}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/{{pathfinderMSISDN}}",
													"host": [
														"{{HOST_WS02}}{{BASE_PATH_WS02}}"
													],
													"path": [
														"parties",
														"MSISDN",
														"{{pathfinderMSISDN}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "59d00a46-f669-47be-8c27-243b98cb3cf1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f1a48c3d-fb96-484b-b59b-b673e1286dd0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative Test Cases",
									"item": [
										{
											"name": "Server Errors",
											"item": [
												{
													"name": "202 - 2000 - Generic Server Error",
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/{{receiverMSISDN}}",
															"host": [
																"{{HOST_WS02}}{{BASE_PATH_WS02}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{receiverMSISDN}}"
															]
														},
														"description": "Generic server error to be used in order not to disclose information that may be considered private."
													},
													"response": []
												},
												{
													"name": "401 - Unauthorized",
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/{{receiverMSISDN}}",
															"host": [
																"{{HOST_WS02}}{{BASE_PATH_WS02}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{receiverMSISDN}}"
															]
														},
														"description": "Generic server error to be used in order not to disclose information that may be considered private."
													},
													"response": []
												},
												{
													"name": "405 - Method Not Allowed (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "e6694f0f-466f-483f-ba4a-3ea3ee20ca95",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "72bcfb4b-2963-4d6d-b756-3794c9c2eb90",
																"exec": [
																	"pm.test(\"Status code is 405\", function () {",
																	"    pm.response.to.have.status(405);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"type": "text"
															}
														],
														"body": {},
														"url": {
															"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/{{receiverMSISDN}}",
															"host": [
																"{{HOST_WS02}}{{BASE_PATH_WS02}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{receiverMSISDN}}"
															],
															"query": [
																{
																	"key": "Accept",
																	"value": "application/vnd.interoperability.participants+json;version=1",
																	"disabled": true
																},
																{
																	"key": "Date",
																	"value": null,
																	"disabled": true
																}
															]
														},
														"description": "Generic server error to be used in order not to disclose information that may be considered private."
													},
													"response": []
												}
											],
											"description": "All possible errors occurring on the server in which it failed to fulfil an apparently valid request from the client should use the high-level error code 2 (error codes 2xxx). These error codes should indicate that the server is aware that it has encountered an error or is otherwise incapable of performing the requested service.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5b141ce7-491d-4275-a1ac-578a5551b8f5",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e9f2605a-6239-4194-804c-2e2ac858c7be",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Client Errors",
											"item": [
												{
													"name": "30xx - Generic Client Errors",
													"item": [
														{
															"name": "3000 - Generic Client Error",
															"request": {
																"method": "GET",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/{{receiverMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"parties",
																		"MSISDN",
																		"{{receiverMSISDN}}"
																	]
																},
																"description": "Generic client error, used in order not to disclose information that may be considered private."
															},
															"response": []
														},
														{
															"name": "406 - 3001 - Unacceptable Version Requested",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "166b6fc0-4c32-4440-a48d-32c235493d5b",
																		"exec": [
																			"pm.test(\"Status code is 202\", function () {",
																			"    pm.response.to.have.status(202);",
																			"});",
																			"",
																			"// pm.test(\"Check that Content-Type is present\", function () {",
																			"//     pm.response.to.have.header(\"Content-Type\");",
																			"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																			"// });",
																			"",
																			"setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																			"       //console.log(response.json());",
																			"       pm.test(\"Expected receiver fspId is: \"+pm.variables.get(\"expectedFspId\"), function () {",
																			"           pm.expect(response.json().party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFspId\"));",
																			"        });",
																			"        ",
																			"      ",
																			"    });",
																			"}, 1000)",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ad1cde37-711e-4ce7-839d-1b023399fb23",
																		"exec": [
																			"//pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																			"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.parties+json;version=100",
																		"type": "text"
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text"
																	},
																	{
																		"key": "Date",
																		"value": "{{dateHeader}}",
																		"type": "text"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.parties+json;version=1.0",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/{{pathfinderMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"parties",
																		"MSISDN",
																		"{{pathfinderMSISDN}}"
																	]
																},
																"description": "Client requested to use a protocol version which is not supported by the server."
															},
															"response": []
														}
													],
													"_postman_isSubFolder": true
												},
												{
													"name": "31xx - Validation Errors",
													"item": [
														{
															"name": "400 - 3100 - Generic Validation Error",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2e43ab97-bafd-420b-a8f7-e6ef12df7231",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.parties+json;version=1",
																		"type": "text"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.parties+json;version=1.0",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/{{receiverMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"parties",
																		"MSISDN",
																		"{{receiverMSISDN}}"
																	]
																},
																"description": "Generic validation error to be used in order not to disclose information that may be considered private."
															},
															"response": []
														},
														{
															"name": "400 - 3101 - Malformed MSISDN (BUG)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																		"exec": [
																			"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "3472322e-3146-4049-a128-f281e0be340e",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																			"       //console.log(response.json());",
																			"       pm.test(\"Error message is expected as response.\", function () {",
																			"           pm.expect(response.json().errorCode).to.eql('3101');",
																			"           pm.expect(response.json().errorDescription).to.eql('Malformed MSISDN');",
																			"        });",
																			"    });",
																			"}, 1000)"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.parties+json;version=1",
																		"type": "text"
																	},
																	{
																		"key": "Date",
																		"value": "{{dateHeader}}",
																		"type": "text"
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.parties+json;version=1.0",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/@3456!",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"parties",
																		"MSISDN",
																		"@3456!"
																	]
																},
																"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
															},
															"response": []
														},
														{
															"name": "400 - 3101 - Malformed Type (BUG)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																		"exec": [
																			"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "3472322e-3146-4049-a128-f281e0be340e",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"pm.test(\"Error message is expected as response.\", function () {",
																			"           var jsonData = pm.response.json();",
																			"           pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																			"           pm.expect(jsonData.errorInformation.errorDescription).to.eql('Bad request - Malformed \\\"Type\\\"');",
																			"        });",
																			"        ",
																			"/*setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																			"      ",
																			"       pm.test(\"Error message is expected as response.\", function () {",
																			"           pm.expect(response.json().errorCode).to.eql('3101');",
																			"           pm.expect(response.json().errorDescription).to.eql('Malformed Type');",
																			"        });",
																			"    });",
																			"}, 1000)*/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"type": "text",
																		"value": "application/vnd.interoperability.parties+json;version=1"
																	},
																	{
																		"key": "Date",
																		"type": "text",
																		"value": "{{dateHeader}}"
																	},
																	{
																		"key": "FSPIOP-Source",
																		"type": "text",
																		"value": "{{payerfsp}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.parties+json;version=1.0",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/XYZ/{{pathfinderMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"parties",
																		"XYZ",
																		"{{pathfinderMSISDN}}"
																	]
																},
																"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
															},
															"response": []
														},
														{
															"name": "400 - 3101 - Malformed Header (BUG)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																		"exec": [
																			"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "3472322e-3146-4049-a128-f281e0be340e",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"",
																			"pm.test(\"Error message is expected as response.\", function () {",
																			"           var jsonData = pm.response.json();",
																			"           pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																			"           pm.expect(jsonData.errorInformation.errorDescription).to.eql('Bad request - Malformed \\\"Accept\\\"');",
																			"        });",
																			"        ",
																			"        ",
																			"/*setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																			"       ",
																			"       pm.test(\"Error message is expected as response.\", function () {",
																			"           pm.expect(response.json().errorCode).to.eql('3101');",
																			"           pm.expect(response.json().errorDescription).to.eql('Malformed MSISDN');",
																			"        });",
																			"    });",
																			"}, 1000)*/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"type": "text",
																		"value": "xyz"
																	},
																	{
																		"key": "Date",
																		"type": "text",
																		"value": "{{dateHeader}}"
																	},
																	{
																		"key": "FSPIOP-Source",
																		"type": "text",
																		"value": "{{payerfsp}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.parties+json;version=1.0",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/{{pathfinderMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"parties",
																		"MSISDN",
																		"{{pathfinderMSISDN}}"
																	]
																},
																"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
															},
															"response": []
														},
														{
															"name": "400 - 3102 - Missing Mandatory MSISDN (BUG)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																		"exec": [
																			"pm.test(\"Status code is 404\", function () {",
																			"    pm.response.to.have.status(404);",
																			"});",
																			"",
																			"pm.test(\"Error message is expected as response.\", function () {",
																			"           var jsonData = pm.response.json();",
																			"           pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																			"           pm.expect(jsonData.errorInformation.errorDescription).to.eql('Bad request - Missing mandatory \\\"ID\\\"');",
																			"        });",
																			"        ",
																			"",
																			"/*setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																			"       ",
																			"       pm.test(\"Expected receiver fspId is: \"+pm.variables.get(\"expectedFspId\"), function () {",
																			"           pm.expect(response.json().party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFspId\"));",
																			"        });",
																			"        ",
																			"      ",
																			"    });",
																			"}, 1000)*/",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																		"exec": [
																			"pm.variables.set('expectedFspId', 'payeefsp');",
																			"pm.variables.set('dateHeader', (new Date()).toUTCString());",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.parties+json;version=1"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.parties+json;version=1.0"
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}"
																	},
																	{
																		"key": "Date",
																		"value": "{{dateHeader}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"parties",
																		"MSISDN",
																		""
																	]
																}
															},
															"response": []
														},
														{
															"name": "400 - 3102 - Missing Mandatory Headers (BUG)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"pm.test(\"Error message is expected as response.\", function () {",
																			"           var jsonData = pm.response.json();",
																			"           pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																			"           pm.expect(jsonData.errorInformation.errorDescription).to.eql('Bad request - Missing mandatory \\\"Date\\\" header');",
																			"        });",
																			"        ",
																			"        ",
																			"",
																			"// pm.test(\"Check that Content-Type is present\", function () {",
																			"//     pm.response.to.have.header(\"Content-Type\");",
																			"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																			"// });",
																			"",
																			"/*setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																			"      ",
																			"       pm.test(\"Error message is expected as response.\", function () {",
																			"           pm.expect(response.json().errorCode).to.eql('3102');",
																			"           pm.expect(response.json().errorDescription).to.eql('Missing Date Header');",
																			"        });",
																			"        ",
																			"      ",
																			"    });",
																			"}, 1000)*/",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																		"exec": [
																			"pm.variables.set('expectedFspId', 'payeefsp');",
																			"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.parties+json;version=1"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.parties+json;version=1.0"
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}"
																	},
																	{
																		"key": "Date",
																		"value": "{{participantDate}}",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/{{pathfinderMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"parties",
																		"MSISDN",
																		"{{pathfinderMSISDN}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "3107 - Missing mandatory extension parameter",
															"request": {
																"method": "GET",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/{{receiverMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"parties",
																		"MSISDN",
																		"{{receiverMSISDN}}"
																	]
																},
																"description": "Scheme-mandatory extension parameter was missing."
															},
															"response": []
														}
													],
													"_postman_isSubFolder": true
												},
												{
													"name": "32xx - Identifier Errors",
													"item": [
														{
															"name": "202 - 3200 - Generic ID Not Found (BUG)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "239058ed-5271-425d-8aa4-5259d1a3b185",
																		"exec": [
																			"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "87f10c97-f0e7-45cb-a9b3-f95e189874a2",
																		"exec": [
																			"pm.test(\"Status code is 202\", function () {",
																			"    pm.response.to.have.status(202);",
																			"});",
																			"",
																			"pm.test(\"Error message is expected as response.\", function () {",
																			"           var jsonData = pm.response.json();",
																			"           pm.expect(jsonData.errorInformation.errorCode).to.eql('3200');",
																			"           pm.expect(jsonData.errorInformation.errorDescription).to.eql('Generic ID not found');",
																			"        });",
																			"        ",
																			"",
																			"/*setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"00000000\"), function (err, response) {",
																			"       //console.log(response.json());",
																			"       pm.test(\"Error message is expected as response.\", function () {",
																			"           pm.expect(response.json().errorCode).to.eql('3200');",
																			"           pm.expect(response.json().errorDescription).to.eql('ID Not Found');",
																			"        });",
																			"        ",
																			"      ",
																			"    });",
																			"}, 1000)*/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.parties+json;version=1",
																		"type": "text"
																	},
																	{
																		"key": "Date",
																		"value": "{{dateHeader}}",
																		"type": "text"
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.parties+json;version=1.0",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/00000000",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"parties",
																		"MSISDN",
																		"00000000"
																	]
																},
																"description": "Generic ID error provided by the client."
															},
															"response": []
														},
														{
															"name": "3201 - Destination FSP Error",
															"request": {
																"method": "GET",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/{{receiverMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"parties",
																		"MSISDN",
																		"{{receiverMSISDN}}"
																	]
																},
																"description": "Destination FSP does not exist or cannot be found."
															},
															"response": []
														},
														{
															"name": "3204 - Party Not Found",
															"request": {
																"method": "GET",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/parties/MSISDN/{{receiverMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"parties",
																		"MSISDN",
																		"{{receiverMSISDN}}"
																	]
																},
																"description": "Party with the provided identifier, identifier type, and optional sub id or type was not found."
															},
															"response": []
														}
													],
													"_postman_isSubFolder": true
												},
												{
													"name": "33xx - Expired Errors",
													"item": [
														{
															"name": "3300 - Generic Expired Error",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "68556769-1dc9-4fe7-a402-a08a28176ff9",
																		"type": "text/javascript",
																		"exec": [
																			"pm.variables.set('transferDate', (new Date()).toUTCString());"
																		]
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "d5cf267b-b8b3-41b6-9211-1c34b33a76a2",
																		"type": "text/javascript",
																		"exec": [
																			"pm.test(\"Status code is 202\", function () {",
																			"    pm.response.to.have.status(202);",
																			"});"
																		]
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.participants+json"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.participants+json;version=1.0"
																	},
																	{
																		"key": "FSPIOP-SOURCE",
																		"value": "payerfsp"
																	},
																	{
																		"key": "Date",
																		"value": "{{headerDate}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/participants/MSISDN/{{receiverMSISDN}}",
																	"host": [
																		"{{HOST_WS02}}{{BASE_PATH_WS02}}"
																	],
																	"path": [
																		"participants",
																		"MSISDN",
																		"{{receiverMSISDN}}"
																	]
																},
																"description": "Generic expired object error, to be used in order not to disclose information that may be considered private."
															},
															"response": []
														}
													],
													"_postman_isSubFolder": true
												}
											],
											"description": "All possible errors occurring on the server in which the server reports that the client has sent one or more erroneous parameters should use the high-level error code 3 (error codes 3xxx). These error codes should indicate that the server could not perform the service according to the request from the client. The server should provide an explanation why the service could not be performed.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "53dc229b-8fd8-4f53-9fed-df2898d7969e",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "07feae10-c923-4652-ace8-14c9a2f9a51e",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"_postman_isSubFolder": true
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "Folder for parties",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2a43de13-c0e4-47b4-a95a-9b466c556d0d",
						"type": "text/javascript",
						"exec": [
							"var requestData = {",
							"    \"party\": {",
							"        \"partyIdInfo\": {",
							"            \"partyIdType\": \"MSISDN\",",
							"            \"partyIdentifier\": \"17039811907\",",
							"            \"fspId\": \"payeefsp\"",
							"        },",
							"        \"name\": \"Siabelo Maroka\",",
							"        \"personalInfo\": {",
							"            \"complexName\": {",
							"                \"firstName\": \"Siabelo\",",
							"                \"lastName\": \"Maroka\"",
							"            },",
							"            \"dateOfBirth\": \"3/3/1973\"",
							"        }",
							"    }",
							"}",
							"",
							"const addUserRequest = {",
							"  url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"),",
							"  method: 'POST',",
							"  headers: {",
							"        \"content-type\": \"application/json\",",
							"        },",
							"  json: requestData",
							"};",
							"pm.sendRequest(addUserRequest, function (err, res) {",
							"  console.log(err ? err : res.json());",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "acda1151-00f5-46f5-ae59-838e0add964d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "quotes ( new quotes service ) Copy",
			"item": [
				{
					"name": "QuotesByID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "{{Accept}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://fsp/quotes/:ID",
							"protocol": "http",
							"host": [
								"fsp"
							],
							"path": [
								"quotes",
								":ID"
							],
							"variable": [
								{
									"key": "ID"
								}
							]
						},
						"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
					},
					"response": []
				},
				{
					"name": "Quotes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "293cbfc1-ae12-4f19-912c-2ef58df174a6",
								"exec": [
									"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
									"   var uuid = require('uuid');",
									"   var generatedUUID = uuid.v4();",
									"   pm.variables.set('quoteId', generatedUUID);",
									"}",
									"",
									"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
									"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "{{Accept}}"
							},
							{
								"key": "Content-Length",
								"value": "{{Content-Length}}"
							},
							{
								"key": "Content-Type",
								"value": "{{Content-Type}}"
							},
							{
								"key": "Date",
								"value": "{{Date}}"
							},
							{
								"key": "X-Forwarded-For",
								"value": "{{X-Forwarded-For}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{FSPIOP-Source}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{FSPIOP-Destination}}"
							},
							{
								"key": "FSPIOP-Encryption",
								"value": "{{FSPIOP-Encryption}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{FSPIOP-Signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"value": "{{FSPIOP-URI}}"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "{{FSPIOP-HTTP-Method}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"100\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_WS02}}{{BASE_PATH_WS02}}/quotes",
							"host": [
								"{{HOST_WS02}}{{BASE_PATH_WS02}}"
							],
							"path": [
								"quotes"
							]
						},
						"description": "The HTTP request POST /quotes is used to request the creation of a quote for the provided financial transaction in the server."
					},
					"response": []
				}
			],
			"description": "Folder for quotes"
		},
		{
			"name": "position_management",
			"item": [
				{
					"name": "happy_path",
					"item": [
						{
							"name": "GET limits",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Get payerfsp position before TheTransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payerfspBeforePosition\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payeefsp position before TheTransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payerfspBeforePosition\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c50395e1-7053-4129-95c0-bde3d27586c3",
										"type": "text/javascript",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"}"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "38c946ea-d0a5-45c0-a8e6-20b75f158103",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
											"      if(response !== null) {",
											"          console.log(response.json());",
											"       pm.test(\"Response ilpPacket is not null\", function () {",
											"           pm.expect(response.json().ilpPacket).not.equal(null);",
											"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
											"       });",
											"       ",
											"       pm.test(\"Response condition is not null\", function () {",
											"           pm.expect(response.json().condition).not.equal(null);",
											"           pm.environment.set(\"condition\", response.json().condition);",
											"       });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           //postman.setNextRequest(null);",
											"      }",
											"       ",
											"   });",
											"}, 1200)",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-SOurce",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803906\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"100\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_INTEROP_SWITCH}}{{BASE_INTEROP_SWITCH}}/quotes",
									"host": [
										"{{HOST_INTEROP_SWITCH}}{{BASE_INTEROP_SWITCH}}"
									],
									"path": [
										"quotes"
									]
								},
								"description": "send quote to a payeefsp that Aborts the transfer."
							},
							"response": []
						},
						{
							"name": "Send Transfer Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1a52645a-d6ed-4753-80ee-913f1d4858cc",
										"type": "text/javascript",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e484a250-b4ef-4068-acde-4f0e4cc46e32",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transferId\"), function (err, response) {",
											"      if(response !== null) {",
											"           var jsonData = response.json();",
											"           pm.test(\"Response transferId is same as the request transferId\", function () {",
											"            pm.expect(jsonData.transferId).to.eql(pm.variables.get('transferId'));",
											"           });",
											"           pm.test(\"Response status is COMMITTED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql('COMMITTED');",
											"           });",
											"      } else {",
											"          pm.test(\"Transfer FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           postman.setNextRequest(null);",
											"      }",
											"   });",
											"}, 1500)",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "3.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"2018-10-01T04:24:00.534+01:00\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_INTEROP_SWITCH}}{{BASE_INTEROP_SWITCH}}/transfers",
									"host": [
										"{{HOST_INTEROP_SWITCH}}{{BASE_INTEROP_SWITCH}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer-prepare",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer-fulfil",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "GET position_Payerfsp after the transfer",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "GET position_Payeefsp after the transfer",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					],
					"description": "GET Limits\nGET Positions for payer and payee\nset amount=(NDC-P)-10\nPOST Quotes - send to payee that responds COMMITTED\nPOST Transfers-Prepare\nPOST Transfers-Fulfil - Payerfsp and payeefsp shd get Transfer COMMITTED status msgs\nGET positions - \n  payer position = prev position + amount\n  payee position = prev position - amount\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "77bc23a0-0b4f-4f2f-8632-2710193868ff",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4bd00df1-18b8-48cf-9a87-3a04661950dd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "payee_abort",
					"item": [
						{
							"name": "GET limits",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Get payerfsp position before TheTransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payerfspBeforePosition\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payeefsp position before TheTransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payerfspBeforePosition\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "SendQuote",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer-prepare",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Get payerfsp positionWhen transfer at RESERVED state",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payerfspBeforePosition\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer-fulfil",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "GET position_Payerfsp after the transfer",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "GET position_Payeefsp after the transfer",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					],
					"description": "GET Limits\nGET Positions for payer and payee\nset amount=(NDC-P) - 10\nPOST Quotes - send to payee that responds ABORTED\nPOST Transfers-Prepare\nGET position of payerfsp - make sure current position = prev position + amount\nPOST Transfers-fulfil with ABORT \n   Both FSP's should be notified of the ABORT status of the transfer.\nGET positions - \n  current payer position = prev position \n  current payee position = prev position \n(Failure of the transfer due to transfer ABORT by payeefsp, results no change in final positions, although there is an increase in payerfsp position when transfer at reserved state)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2f9024db-2f95-4bf6-9022-f7bd5d50afd3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eefb3ca4-f973-4059-95cc-c681c9e55121",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "transfer_timeout",
					"item": [
						{
							"name": "GET limits",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Get payerfsp position before TheTransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payerfspBeforePosition\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payeefsp position before TheTransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payerfspBeforePosition\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "SendQuote",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer-prepare",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "Get payerfsp positionWhen transfer at RESERVED state",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payerfspBeforePosition\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer-fulfil",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "GET position_Payerfsp after the transfer",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "GET position_Payeefsp after the transfer",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					],
					"description": "GET Limits\nGET Positions for payer and payee\nset amount=(NDC-P) - 10\nPOST Quotes - send to payeefsp that doesn't respond\nPOST Transfers-Prepare\nGET position of payerfsp - make sure current position = prev position + amount\nBoth FSP's should be notified of the ABORT status of the transfer due to timeout.\nGET positions - \n  current payer position = prev position \n  current payee position = prev position \n(Failure of the transfer due to transfer Timedout in Switch, results no change in final positions, although there is an increase in payerfsp position when transfer at RESERVED state)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2f9024db-2f95-4bf6-9022-f7bd5d50afd3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eefb3ca4-f973-4059-95cc-c681c9e55121",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "af4aa3d2-0dc7-4bd0-bf17-79f7a006d5ce",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "53d083d5-2660-427d-b9fd-5ab3cb3ac417",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "a8f236cd-291b-4017-9d8f-0f59a27dfa40",
			"key": "payerNDC",
			"value": "0",
			"type": "string"
		},
		{
			"id": "12911a81-cef6-4cf4-9d92-fd9c21d9444d",
			"key": "payerfspPositionBeforeTransfer",
			"value": "0",
			"type": "string"
		},
		{
			"id": "bde38d5a-2ddb-4f27-a83e-28e3fb842381",
			"key": "payeefspPositionBeforeTransfer",
			"value": "0",
			"type": "string"
		},
		{
			"id": "0bd1769c-1087-4b7b-84d1-296d1225f35b",
			"key": "payerfspPositionAfterTransfer",
			"value": "0",
			"type": "string"
		},
		{
			"id": "7d0eacbf-4b36-4704-b2ed-b8f9c00e4d71",
			"key": "payeefspPositionAfterTransfer",
			"value": "0",
			"type": "string"
		},
		{
			"id": "5ab0807d-f0de-482a-88d0-976a8dfef51f",
			"key": "transferAmount",
			"value": "0",
			"type": "string"
		}
	]
}